from matplotlib import pyplot as plt
import numpy as np
from scipy import interpolate

# -------------------------------------------------------------------------

# x = [1, 2, 3, 4]
# y = [1, 4, 9, 16]
#
# plt.plot(x, y)
# plt.xlabel('Значения')
# plt.ylabel('Квадрат значения')
# plt.show()

# -------------------------------------------------------------------------
''' Построение графика функции y = x^3'''

# x = np.arange(-10, 10, 0.1)
# y = x ** 3
# plt.plot(x, y)
# plt.show()
# -------------------------------------------------------------------------
""" Обьеденим все вместе - построим график функции по заданной функции """

x = np.arange(0, 10, 2)  # От 0 дл 10 с шагом 2
# y = np.exp(-x / 3.0)  # Наша функция, - экспонента в степени -х / 3.0 ( важно делить на числа с плав. точкой )
#                     # зачастую в статистике присуствует много шума.
#                     # Например если к функция будет равна np.exp(-x/3.0) + np.random.rand(len(x))
y = np.exp(-x/3.0) + np.random.rand(len(x)) * 0.05
print(x[:5])
print(y[:5])

f = interpolate.interp1d(x, y, kind='quadratic')  # по умолчанию kind - linear,
#                                                 # но его можно задавать и так же менять например 'quadratic'
xnew = np.arange(0, 8, 0.1)
ynew = f(xnew)

plt.plot(x, y, 'o', xnew, ynew, '-')
plt.title('Интерполяция функции ')
plt.show()
